@using Chess_Blazor.Client.Data
@code{
    List<Piece> blackPiece = new List<Piece>();
    List<Piece> whitePiece = new List<Piece>();

    protected override void OnInitialized()
    {
        for (int i = 0; i < 8; i++)
        {
            blackPiece.Add(new Piece
            {
                Color = "Noir",
                Column = i,
                Row = 1,
                Direction = PieceDirection.PionN,
                Name = "Pion",
                Value = 1
            });

            whitePiece.Add(new Piece
            {
                Color = "Blanc",
                Column = i,
                Row = 6,
                Direction = PieceDirection.PionB,
                Name = "Pion",
                Value = 1
            });
        }

        for (int i = 0; i < 8; i+=7)
        {
            blackPiece.Add(new Piece
            {
                Color = "Noir",
                Column = i,
                Row = 0,
                Direction = PieceDirection.Tour,
                Name = "Tour",
                Value = 5
            });

            whitePiece.Add(new Piece
            {
                Color = "Blanc",
                Column = i,
                Row = 7,
                Direction = PieceDirection.Tour,
                Name = "Tour",
                Value = 5
            });
        }

        for (int i = 1; i < 8; i += 5)
        {
            blackPiece.Add(new Piece
            {
                Color = "Noir",
                Column = i,
                Row = 0,
                Direction = PieceDirection.Cavalier,
                Name = "Cavalier",
                Value = 3
            });

            whitePiece.Add(new Piece
            {
                Color = "Blanc",
                Column = i,
                Row = 7,
                Direction = PieceDirection.Cavalier,
                Name = "Cavalier",
                Value = 3
            });
        }

        for (int i = 2; i < 6; i += 3)
        {
            blackPiece.Add(new Piece
            {
                Color = "Noir",
                Column = i,
                Row = 0,
                Direction = PieceDirection.Fou,
                Name = "Fou",
                Value = 3
            });

            whitePiece.Add(new Piece
            {
                Color = "Blanc",
                Column = i,
                Row = 7,
                Direction = PieceDirection.Fou,
                Name = "Fou",
                Value = 3
            });
        }

        blackPiece.Add(new Piece
        {
            Color = "Noir",
            Column = 4,
            Row = 0,
            Direction = PieceDirection.Roi,
            Name = "Roi",
            Value = 100
        });

        whitePiece.Add(new Piece
        {
            Color = "Blanc",
            Column = 4,
            Row = 7,
            Direction = PieceDirection.Roi,
            Name = "Roi",
            Value = 100
        });

        blackPiece.Add(new Piece
        {
            Color = "Noir",
            Column = 3,
            Row = 0,
            Direction = PieceDirection.Reine,
            Name = "Reine",
            Value = 9
        });

        whitePiece.Add(new Piece
        {
            Color = "Blanc",
            Column = 3,
            Row = 7,
            Direction = PieceDirection.Reine,
            Name = "Reine",
            Value = 9
        });
    }

    Piece activePiece = null;
    List<int> rowsPossible = new List<int>();
    List<int> columnsPossible = new List<int>();

    public void EvaluatePionNSpots()
    {
        rowsPossible.Clear();
        columnsPossible.Clear();

        if (activePiece != null)
        {
            rowsPossible.Add(activePiece.Row + 1);
            if(activePiece.Row == 1)
            {
                rowsPossible.Add(activePiece.Row + 2);
            }

            columnsPossible.Add(activePiece.Column);
        }
    }
    public void EvaluatePionBSpots()
    {
        rowsPossible.Clear();
        columnsPossible.Clear();

        if (activePiece != null)
        {
            rowsPossible.Add(activePiece.Row - 1);
            if (activePiece.Row == 6)
            {
                rowsPossible.Add(activePiece.Row - 2);
            }

            columnsPossible.Add(activePiece.Column);
        }
    }
}

@for (int i = 0; i < 8; i++)
{
<div class="row">
    @for (int j = 0; j < 8; j++)
    {
        var bPiece = blackPiece.FirstOrDefault(n => n.Column == j && n.Row == i);
        var wPiece = whitePiece.FirstOrDefault(n => n.Column == j && n.Row == i);

        bool canMoveHere = rowsPossible.Contains(i) && columnsPossible.Contains(j); 

        <div class="cell @(canMoveHere ? "active" : "")">
        @if (bPiece != null && bPiece.Name == "Pion")
        {
            <div @onclick="() => { activePiece = bPiece; EvaluatePionNSpots(); }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9823;</div>
        }
        @if (wPiece != null && wPiece.Name == "Pion")
        {
            <div @onclick="() => { activePiece = wPiece; EvaluatePionBSpots(); }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9817;</div>
        }
        @if (bPiece != null && bPiece.Name == "Tour")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9820;</div>
        }
        @if (wPiece != null && wPiece.Name == "Tour")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9814;</div>
        }
        @if (bPiece != null && bPiece.Name == "Cavalier")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9822;</div>
        }
        @if (wPiece != null && wPiece.Name == "Cavalier")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9816;</div>
        }
        @if (bPiece != null && bPiece.Name == "Fou")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9821;</div>
        }
        @if (wPiece != null && wPiece.Name == "Fou")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9815;</div>
        }
        @if (bPiece != null && bPiece.Name == "Roi")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9818;</div>
        }
        @if (wPiece != null && wPiece.Name == "Roi")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9812;</div>
        }
        @if (bPiece != null && bPiece.Name == "Reine")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9819;</div>
        }
        @if (wPiece != null && wPiece.Name == "Reine")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9813;</div>
        }
    </div>
    }
</div>
}