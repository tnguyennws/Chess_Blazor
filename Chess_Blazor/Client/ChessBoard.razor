@using Chess_Blazor.Client.Data
@code{
    List<Piece> blackPiece = new List<Piece>();
    List<Piece> whitePiece = new List<Piece>();

    string[,] map = new string[8, 8]
        {{"NTour1", "NCavalier1", "NFou1", "NReine", "NRoi", "NFou2", "NCavalier2", "NTour2" },
         { "NPion1",  "NPion2",   "NPion3", "NPion4", "NPion5", "NPion6", "NPion7",  "NPion8" },
         { "X",       "X",        "X",      "X",      "X",       "X",      "X",       "X" },
         { "X",       "X",        "X",      "X",      "X",       "X",      "X",       "X" },
         { "X",       "X",        "X",      "X",      "X",       "X",      "X",       "X" },
         { "X",       "X",        "X",      "X",      "X",       "X",      "X",       "X" },
         { "BPion1",  "BPion2",   "BPion3", "BPion4", "BPion5", "BPion6", "BPion7",  "BPion8" },
         { "BTour1", "BCavalier1", "BFou1", "BReine", "BRoi", "BFou2", "BCavalier2", "BTour2"}};

    protected override void OnInitialized()
    {
        for (int i = 0; i < 8; i++)
        {
            blackPiece.Add(new Piece
            {
                Color = "Noir",
                Column = i,
                Row = 1,
                Direction = PieceDirection.PionN,
                Name = "Pion",
                Value = 1
            });

            whitePiece.Add(new Piece
            {
                Color = "Blanc",
                Column = i,
                Row = 6,
                Direction = PieceDirection.PionB,
                Name = "Pion",
                Value = 1
            });
        }

        for (int i = 0; i < 8; i += 7)
        {
            blackPiece.Add(new Piece
            {
                Color = "Noir",
                Column = i,
                Row = 0,
                Direction = PieceDirection.Tour,
                Name = "Tour",
                Value = 5
            });

            whitePiece.Add(new Piece
            {
                Color = "Blanc",
                Column = i,
                Row = 7,
                Direction = PieceDirection.Tour,
                Name = "Tour",
                Value = 5
            });
        }

        for (int i = 1; i < 8; i += 5)
        {
            blackPiece.Add(new Piece
            {
                Color = "Noir",
                Column = i,
                Row = 0,
                Direction = PieceDirection.Cavalier,
                Name = "Cavalier",
                Value = 3
            });

            whitePiece.Add(new Piece
            {
                Color = "Blanc",
                Column = i,
                Row = 7,
                Direction = PieceDirection.Cavalier,
                Name = "Cavalier",
                Value = 3
            });
        }

        for (int i = 2; i < 6; i += 3)
        {
            blackPiece.Add(new Piece
            {
                Color = "Noir",
                Column = i,
                Row = 0,
                Direction = PieceDirection.Fou,
                Name = "Fou",
                Value = 3
            });

            whitePiece.Add(new Piece
            {
                Color = "Blanc",
                Column = i,
                Row = 7,
                Direction = PieceDirection.Fou,
                Name = "Fou",
                Value = 3
            });
        }

        blackPiece.Add(new Piece
        {
            Color = "Noir",
            Column = 4,
            Row = 0,
            Direction = PieceDirection.Roi,
            Name = "Roi",
            Value = 100
        });

        whitePiece.Add(new Piece
        {
            Color = "Blanc",
            Column = 4,
            Row = 7,
            Direction = PieceDirection.Roi,
            Name = "Roi",
            Value = 100
        });

        blackPiece.Add(new Piece
        {
            Color = "Noir",
            Column = 3,
            Row = 0,
            Direction = PieceDirection.Reine,
            Name = "Reine",
            Value = 9
        });

        whitePiece.Add(new Piece
        {
            Color = "Blanc",
            Column = 3,
            Row = 7,
            Direction = PieceDirection.Reine,
            Name = "Reine",
            Value = 9
        });
    }

    Piece activePiece = null;

    bool[,] possibleMove = new bool[8, 8]
    {
        { false, false, false, false, false, false, false, false },
        { false, false, false, false, false, false, false, false },
        { false, false, false, false, false, false, false, false },
        { false, false, false, false, false, false, false, false },
        { false, false, false, false, false, false, false, false },
        { false, false, false, false, false, false, false, false },
        { false, false, false, false, false, false, false, false },
        { false, false, false, false, false, false, false, false }
    };

    public void clearMoves()
    {
        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                possibleMove[i, j] = false;
            }
        }
    }

    int posX, posY;

    public void EvaluatePionNSpots()
    {
        rowsPossible.Clear();
        columnsPossible.Clear();
        clearMoves();

        if (activePiece != null)
        {
            posX = activePiece.Row;
            posY = activePiece.Column;

            if(map[posX + 1, posY] == "X")
            {
                possibleMove[posX + 1, posY] = true;

                if (map[posX + 2, posY] == "X" && posX == 1)
                {
                    possibleMove[posX + 2, posY] = true;
                }
            }
            /*if (map[posX + 1, posY + 1].FirstOrDefault() == 'B')
            {
                rowsPossible.Add(activePiece.Row + 1);
                columnsPossible.Add(activePiece.Column + 1);
            }
            if (map[posX + 1, posY - 1].FirstOrDefault() == 'B')
            {
                rowsPossible.Add(activePiece.Row + 1);
                columnsPossible.Add(activePiece.Column - 1);
            }*/
        }
    }

    public void EvaluatePionBSpots()
    {
        clearMoves();

        if (activePiece != null)
        {
            posX = activePiece.Row;
            posY = activePiece.Column;
            if (map[posX - 1, posY] == "X")
            {
                possibleMove[posX - 1, posY] = true;

                if (map[posX - 2, posY] == "X" && posX == 6)
                {
                    possibleMove[posX - 2, posY] = true;
                }
            }
            /*if (map[posX - 1, posY + 1].FirstOrDefault() == 'N')
            {
                rowsPossible.Add(activePiece.Row - 1);
                columnsPossible.Add(activePiece.Column + 1);
            }
            if (map[posX - 1, posY - 1].FirstOrDefault() == 'N')
            {
                rowsPossible.Add(activePiece.Row - 1);
                columnsPossible.Add(activePiece.Column - 1);
            }*/
        }
    }

    public void EvaluateTourSpots()
    {
        clearMoves();

        if (activePiece != null)
        {
            posX = activePiece.Row;
            posY = activePiece.Column;

            for (int order = 0; order < 4; order++)
            {
                switch (order)
                {
                    case 0:
                        int i = 1;
                        while (map[posX + i, posY] == "X")
                        {
                            if (posX == 7)
                                break;
                            possibleMove[posX + i, posY] = true;
                            i++;
                        }
                        break;

                    case 1:
                        int j = 1;
                        while (map[posX - j, posY] == "X")
                        {
                            if (posX == 0)
                                break;
                            possibleMove[posX - j, posY] = true;
                            j++;
                        }
                        break;

                    case 2:
                        int k = 1;
                        while (map[posX, posY + k] == "X")
                        {
                            if (posY == 7)
                                break;
                            possibleMove[posX, posY + k] = true;
                            k++;
                        }
                        break;

                    case 3:
                        int l = 1;
                        while (map[posX, posY - l] == "X")
                        {
                            if (posY == 0)
                                break;
                            possibleMove[posX, posY - l] = true;
                            l++;
                        }
                        break;

                    default:
                        Console.Write("Erreur");
                        break;
                }
            }
        }
    }

    public void MovePiece(int row, int column)
    {
        bool canMoveHere = possibleMove[row, column];
        if (!canMoveHere)
            return;

        string tempP = map[activePiece.Row, activePiece.Column];
        map[activePiece.Row, activePiece.Column] = "X";

        activePiece.Column = column;
        activePiece.Row = row;

        map[activePiece.Row, activePiece.Column] = tempP;

        activePiece = null;
    }
        }

        @for (int i = 0; i < 8; i++)
        {
            int localI = i;

    <div class="row">
    @for (int j = 0; j < 8; j++)
    {
        int localJ = j;

        Piece bPiece = blackPiece.FirstOrDefault(n => n.Column == j && n.Row == i);
        Piece wPiece = whitePiece.FirstOrDefault(n => n.Column == j && n.Row == i);

        bool canMoveHere = possibleMove[i, j];

        <div @onclick="() => MovePiece(localI, localJ)" class="cell @(canMoveHere ? "active" : "")">
        @if (bPiece != null && bPiece.Name == "Pion")
        {
            <div @onclick="() => { activePiece = bPiece; EvaluatePionNSpots(); }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9823;</div>
        }
    @if (wPiece != null && wPiece.Name == "Pion")
    {
            <div @onclick="() => { activePiece = wPiece; EvaluatePionBSpots(); }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9817;</div>
    }
        @if (bPiece != null && bPiece.Name == "Tour")
        {
            <div @onclick="() => { activePiece = bPiece; EvaluateTourSpots(); }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9820;</div>
        }
        @if (wPiece != null && wPiece.Name == "Tour")
        {
            <div @onclick="() => { activePiece = wPiece; EvaluateTourSpots(); }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9814;</div>
        }
        @if (bPiece != null && bPiece.Name == "Cavalier")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9822;</div>
        }
        @if (wPiece != null && wPiece.Name == "Cavalier")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9816;</div>
        }
        @if (bPiece != null && bPiece.Name == "Fou")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9821;</div>
        }
        @if (wPiece != null && wPiece.Name == "Fou")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9815;</div>
        }
        @if (bPiece != null && bPiece.Name == "Roi")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9818;</div>
        }
        @if (wPiece != null && wPiece.Name == "Roi")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9812;</div>
        }
        @if (bPiece != null && bPiece.Name == "Reine")
        {
            <div @onclick="() => { activePiece = bPiece; }"
                 class="piece @bPiece.Color @(bPiece == activePiece ? "active" : "")">&#9819;</div>
        }
        @if (wPiece != null && wPiece.Name == "Reine")
        {
            <div @onclick="() => { activePiece = wPiece; }"
                 class="piece @wPiece.Color @(wPiece == activePiece ? "active" : "")">&#9813;</div>
        }
    </div>
    }
</div>
}